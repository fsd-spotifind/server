generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id])

    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime
    user                  User      @relation(fields: [userId], references: [id])

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model User {
    // required by better-auth
    id            String    @id
    name          String
    email         String    @unique
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]

    username         String?         @unique
    bio              String?
    photoUrl         String?
    friendsInitiated Friend[]        @relation("UserOne")
    friendsReceived  Friend[]        @relation("UserTwo")
    songOfTheDay     SongOfTheDay[]
    userStatistics   UserStatistic[]

    @@map("user")
}

model Friend {
    id        String       @id @default(cuid())
    status    FriendStatus
    userOneId String
    userTwoId String
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    userOne User @relation("UserOne", fields: [userOneId], references: [id])
    userTwo User @relation("UserTwo", fields: [userTwoId], references: [id])

    @@map("friend")
}

model SongOfTheDay {
    id        String   @id @default(cuid())
    userId    String
    trackId   String
    note      String?
    mood      String?
    setAt     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@unique([userId, setAt])
    @@map("song_of_the_day")
}

model UserStatistic {
    id            String          @id @default(cuid())
    userId        String
    period        StatisticPeriod
    totalTracks   Int             @default(0)
    totalDuration Int             @default(0)
    uniqueArtists Int             @default(0)
    vibe          String?
    topArtistsIds String[]
    topTracksIds  String[]
    topAlbumsIds  String[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("user_statistic")
}

// TODO: Add User-Genre table for discovery feature

enum StatisticPeriod {
    WEEKLY     @map("weekly")
    MONTHLY    @map("monthly")
    SEMIANNUAL @map("semiannual")
    ANNUAL     @map("annual")
}

enum FriendStatus {
    PENDING @map("pending")
    ACTIVE  @map("active")
    REMOVED @map("removed")
}
